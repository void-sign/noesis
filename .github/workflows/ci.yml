name: Noesis Core CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering
  schedule:
    # Run once per hour to check for commits older than 1 hour
    - cron: '0 * * * *'

jobs:
  check_commit_time:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_time.outputs.should_run }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Check last commit time
        id: check_time
        run: |
          # Get the timestamp of the last commit
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          
          # Check if the last commit is older than 1 hour (3600 seconds)
          if [ $TIME_DIFF -gt 3600 ]; then
            echo "Last commit was made more than 1 hour ago ($TIME_DIFF seconds)"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Last commit was made less than 1 hour ago ($TIME_DIFF seconds)"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
  build:
    runs-on: ubuntu-latest
    needs: check_commit_time
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish gcc g++ cmake
        
    - name: Setup build cache
      uses: actions/cache@v3
      with:
        path: |
          build/obj
          libs/obj
        key: ${{ runner.os }}-build-${{ hashFiles('**/*.c', '**/*.h', '**/Makefile') }}
        restore-keys: |
          ${{ runner.os }}-build-
    
    - name: Build project
      run: |
        fish ./scripts/fish/build_all.fish
      
    - name: Create shared library
      run: |
        mkdir -p build/lib
        gcc -shared -o build/lib/libnoesis_core.so build/obj/core/*.o build/obj/utils/*.o build/obj/asm/*.o
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: noesis-core-build
        path: |
          build/bin/
          build/lib/
          include/
        retention-days: 7

  test:
    needs: [build, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: noesis-core-build
        
    - name: Run all tests and save logs
      run: |
        # Create logs directory if it doesn't exist
        mkdir -p logs
        
        # Run tests and capture output
        echo "Running Noesis Core Tests..." > logs/test_output.log
        echo "> Running ./noesis_tests" >> logs/test_output.log
        
        # Execute test and save output
        make test > /tmp/noesis_test_raw.tmp 2>&1
        TEST_EXIT_CODE=$?
        
        echo "> Test binary executed" >> logs/test_output.log
        echo "  Result: Test ran with exit code $TEST_EXIT_CODE" >> logs/test_output.log
        
        # Add status information
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo -e "\n✓ Tests completed successfully" >> logs/test_output.log
        else
          echo -e "\n✗ Tests failed with exit code $TEST_EXIT_CODE" >> logs/test_output.log
        fi
        
        echo -e "\nCore tests completed." >> logs/test_output.log
        
        # Add detailed test metadata to separate file
        echo "----------------------------------------------------------------" > logs/test_metadata.log
        echo "Tests completed at $(date)" >> logs/test_metadata.log
        echo "System: $(uname -a)" >> logs/test_metadata.log
        echo "Commit: $(git rev-parse HEAD)" >> logs/test_metadata.log
        echo "Exit code: $TEST_EXIT_CODE" >> logs/test_metadata.log
        
        # Save the raw binary output for debugging if needed
        cp /tmp/noesis_test_raw.tmp logs/test_raw_output.bin
        
        # Output summary to the CI console
        echo "Test logs saved to logs/test_output.log"
        cat logs/test_output.log
        
        # Return the original exit code
        exit $TEST_EXIT_CODE
        
    - name: Upload test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-logs
        path: logs/
        retention-days: 30
        
  security_scan:
    needs: [check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cppcheck flawfinder clang-tools
        
    - name: Install CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        queries: security-and-quality
    
    - name: Run Flawfinder (C/C++ Security Scan)
      run: |
        flawfinder --html --context --minlevel=3 src/ > flawfinder-report.html
      continue-on-error: true
    
    - name: Run Cppcheck (Code Smell Detection)
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 src/ include/ 2> cppcheck-report.xml
        cppcheck --enable=all --inconclusive --output-file=cppcheck-report.txt src/ include/
      continue-on-error: true
    
    - name: Check Buffer Overflows with CodeQL
      uses: github/codeql-action/analyze@v2
      
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          flawfinder-report.html
          cppcheck-report.xml
          cppcheck-report.txt
        retention-days: 7

  examples:
    needs: [build, check_commit_time]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_commit_time.outputs.should_run == 'true') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: noesis-core-build
    
    - name: Build examples
      run: |
        cd examples
        make
        
    - name: Build hub example
      run: |
        cd examples/hub_example
        fish ./install.fish
        make
        
  dependency_check:
    needs: [build, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential binutils nm readelf file
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: noesis-core-build
        
    - name: Check for unauthorized external dependencies
      run: |
        echo "# Dependency Check Report" > dependency-report.md
        echo "## Generated on: $(date)" >> dependency-report.md
        echo "### Checking for external libc dependencies" >> dependency-report.md
        
        # Create a list of allowed symbols from noesis_libc
        mkdir -p checks
        find . -path "*/libs/noesis_libc/*" -name "*.h" -exec grep -h "^[a-zA-Z_]* [a-zA-Z0-9_]*(" {} \; | sed 's/(.*//' > checks/allowed_functions.txt
        find . -path "*/libs/include/*" -name "*.h" -exec grep -h "^[a-zA-Z_]* [a-zA-Z0-9_]*(" {} \; | sed 's/(.*//' >> checks/allowed_functions.txt
        
        # Check each binary and library file
        echo "## Checking binaries in bin directory" >> dependency-report.md
        echo '```' >> dependency-report.md
        find . -path "*/bin/*" -type f -executable | while read binary; do
          echo "Checking $binary..." >> dependency-report.md
          
          # Check if the binary is dynamically linked
          if file "$binary" | grep -q "dynamically linked"; then
            echo "ERROR: $binary is dynamically linked!" >> dependency-report.md
            ldd "$binary" >> dependency-report.md
          fi
          
          # Check for glibc symbols
          nm -D "$binary" 2>/dev/null | grep -E " U |GLIBC|GLIBCXX" | grep -v "noesis_" >> dependency-report.md || true
        done
        echo '```' >> dependency-report.md
        
        echo "## Checking libraries in lib directories" >> dependency-report.md
        echo '```' >> dependency-report.md
        find . -path "*/lib/*" \( -name "*.so" -o -name "*.a" \) | while read library; do
          echo "Checking $library..." >> dependency-report.md
          
          # For shared libraries, check if they are linked against libc
          if [[ "$library" == *.so ]]; then
            if ldd "$library" 2>/dev/null | grep -q "libc.so"; then
              echo "ERROR: $library depends on external libc!" >> dependency-report.md
              ldd "$library" >> dependency-report.md
            fi
          fi
          
          # Check for glibc symbols
          nm "$library" 2>/dev/null | grep -E " U |GLIBC|GLIBCXX" | grep -v "noesis_" >> dependency-report.md || true
        done
        echo '```' >> dependency-report.md
        
        # Create a summary
        echo "## Summary" >> dependency-report.md
        if grep -q "ERROR" dependency-report.md; then
          echo "❌ External dependencies found! See details above." >> dependency-report.md
          echo "::error::External dependencies detected. Build fails policy check."
          exit 1
        else
          echo "✅ No unauthorized external dependencies found. All tests passed." >> dependency-report.md
        fi
      continue-on-error: true
        
    - name: Upload dependency report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-reports
        path: dependency-report.md
        retention-days: 7

  security_report:
    needs: [security_scan, dependency_check, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') }}
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
    
    - name: Download dependency reports
      uses: actions/download-artifact@v3
      with:
        name: dependency-reports
        
    - name: Generate combined summary
      run: |
        echo "# Noesis Project Validation Summary" > validation-summary.md
        echo "## Generated on: $(date)" >> validation-summary.md
        
        echo "## Security Issues" >> validation-summary.md
        echo "### Cppcheck Issues" >> validation-summary.md
        echo '```' >> validation-summary.md
        grep -E "error|warning|style|performance" cppcheck-report.txt | head -n 50 >> validation-summary.md
        echo '```' >> validation-summary.md
        echo "### Flawfinder Issues" >> validation-summary.md
        echo "See HTML report for detailed findings" >> validation-summary.md
        
        echo "## Dependency Check Results" >> validation-summary.md
        cat dependency-report.md >> validation-summary.md
        
    - name: Upload combined summary
      uses: actions/upload-artifact@v3
      with:
        name: validation-summary
        path: validation-summary.md
        retention-days: 7
