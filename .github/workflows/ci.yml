# CI workflow for Noesis Core
name: Noesis Core CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering
  schedule:
    # Run once per hour to check for commits older than 1 hour
    - cron: '0 * * * *'

jobs:
  check_commit_time:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check_time.outputs.should_run }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          
      - name: Check last commit time
        id: check_time
        run: |
          # Get the timestamp of the last commit
          LAST_COMMIT_TIME=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          TIME_DIFF=$((CURRENT_TIME - LAST_COMMIT_TIME))
          
          # Check if the last commit is older than 1 hour (3600 seconds)
          if [ $TIME_DIFF -gt 3600 ]; then
            echo "Last commit was made more than 1 hour ago ($TIME_DIFF seconds)"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "Last commit was made less than 1 hour ago ($TIME_DIFF seconds)"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
          
  check_files:
    runs-on: ubuntu-latest
    needs: check_commit_time
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
        
    - name: Verify required files
      run: |
        # List of required files based on current project structure
        required_files=(
          "soul/intent.fish"
          "system/memory/unit.fish"
          "system/perception/unit.fish"
          "system/emotion/unit.fish"
          "system/memory/quantum/unit.fish"
          "system/memory/quantum/compiler.fish"
          "system/memory/quantum/backend_stub.fish"
          "system/memory/quantum/backend_ibm.fish"
          "system/memory/quantum/export_qasm.fish"
          "system/memory/quantum/field/quantum_field.fish"
          "system/memory/short.fish"
          "system/memory/long.fish"
          "system/perception/api.fish"
        )
        
        all_files_exist=true
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "Missing file: $file"
            all_files_exist=false
          fi
        done
        
        if [ "$all_files_exist" = "false" ]; then
          echo "Error: Some required files are missing"
          exit 1
        fi
        
        echo "All required files exist"
      
    - name: Upload verified files list
      uses: actions/upload-artifact@v3
      with:
        name: verified-files
        path: |
          soul/
          system/
        retention-days: 1

  test:
    needs: [check_files, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
    
    - name: Download verified files
      uses: actions/download-artifact@v3
      with:
        name: verified-files
        
    - name: Run tests
      run: |
        # Create logs directory if it doesn't exist
        mkdir -p logs
        
        # Run tests and capture output
        echo "Running Noesis Core Tests..." > logs/test_output.log
        echo "> Running tests with test.fish" >> logs/test_output.log
        
        # Execute test script and save output
        fish ./test.fish > /tmp/noesis_test_raw.tmp 2>&1
        TEST_EXIT_CODE=$?
        
        echo "> Test script executed" >> logs/test_output.log
        echo "  Result: Test ran with exit code $TEST_EXIT_CODE" >> logs/test_output.log
        
        # Add status information
        if [ $TEST_EXIT_CODE -eq 0 ]; then
          echo -e "\n✓ Tests completed successfully" >> logs/test_output.log
        else
          echo -e "\n✗ Tests failed with exit code $TEST_EXIT_CODE" >> logs/test_output.log
        fi
        
        echo -e "\nCore tests completed." >> logs/test_output.log
        
        # Add detailed test metadata to separate file
        echo "----------------------------------------------------------------" > logs/test_metadata.log
        echo "Tests completed at $(date)" >> logs/test_metadata.log
        echo "System: $(uname -a)" >> logs/test_metadata.log
        echo "Commit: $(git rev-parse HEAD)" >> logs/test_metadata.log
        echo "Exit code: $TEST_EXIT_CODE" >> logs/test_metadata.log
        
        # Save the raw binary output for debugging if needed
        cp /tmp/noesis_test_raw.tmp logs/test_raw_output.bin
        
        # Output summary to the CI console
        echo "Test logs saved to logs/test_output.log"
        cat logs/test_output.log
        
        # Return the original exit code
        exit $TEST_EXIT_CODE
        
    - name: Upload test logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-logs
        path: logs/
        retention-days: 30
        
  security_scan:
    needs: [check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish cppcheck flawfinder clang-tools
        
    - name: Run Fish Shell Linting
      run: |
        # Check Fish syntax for all fish files
        find . -name "*.fish" -exec fish -n {} \; > fish-lint-report.txt 2>&1
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          fish-lint-report.txt
        retention-days: 7

  install_test:
    needs: [test, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
    
    - name: Test installation process
      run: |
        # Run installation script
        sudo fish ./install.fish
        
        # Test that the installed command works
        noesis -v > version_output.txt 2>&1
        INSTALL_EXIT_CODE=$?
        
        # Check output
        if [ $INSTALL_EXIT_CODE -eq 0 ]; then
          echo "✓ Installation successful and noesis command works"
          cat version_output.txt
        else
          echo "✗ Installation test failed with exit code $INSTALL_EXIT_CODE"
          cat version_output.txt
          exit 1
        fi
        
    - name: Upload installation test output
      uses: actions/upload-artifact@v3
      with:
        name: install-test-output
        path: version_output.txt
        retention-days: 7

  examples:
    needs: [check_files, check_commit_time]
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.check_commit_time.outputs.should_run == 'true') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up environment
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential fish
    
    - name: Execute examples
      run: |
        # Create examples directory if it doesn't exist
        mkdir -p examples_output
        
        # Run a simple example with Noesis
        fish -c "cd $(pwd) && source soul/intent.fish && thoughts 'Example running from CI workflow'" > examples_output/simple_example.txt 2>&1 || true
        
    - name: Display Hub information
      run: |
        echo "Noesis Hub is now an independent platform"
        echo "See: https://github.com/void-sign/noesis-hub"
        
    - name: Upload example outputs
      uses: actions/upload-artifact@v3
      with:
        name: example-outputs
        path: examples_output/
        retention-days: 7

  security_report:
    needs: [security_scan, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch') }}
    
    steps:
    - name: Download security reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        
    - name: Generate combined summary
      run: |
        echo "# Noesis Project Validation Summary" > validation-summary.md
        echo "## Generated on: $(date)" >> validation-summary.md
        
        echo "## Security Issues" >> validation-summary.md
        echo "### Fish Syntax Issues" >> validation-summary.md
        echo '```' >> validation-summary.md
        cat fish-lint-report.txt | head -n 50 >> validation-summary.md || echo "No fish lint report found" >> validation-summary.md
        echo '```' >> validation-summary.md
        
    - name: Upload combined summary
      uses: actions/upload-artifact@v3
      with:
        name: validation-summary
        path: validation-summary.md
        retention-days: 7

  docker_build:
    needs: [check_files, check_commit_time]
    runs-on: ubuntu-latest
    if: ${{ needs.check_commit_time.outputs.should_run == 'true' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Build Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: false
        tags: noesis:latest
